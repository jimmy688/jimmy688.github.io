(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{1149:function(e,t,s){e.exports=s.p+"assets/img/container_evolution.cb55fb19.cb55fb19.svg"},1150:function(e,t,s){e.exports=s.p+"assets/img/borg.bb3ba0c7.png"},1151:function(e,t,s){e.exports=s.p+"assets/img/architecture.837055bc.png"},1152:function(e,t,s){e.exports=s.p+"assets/img/image-20201117182651823.c2e94660.png"},1153:function(e,t,s){e.exports=s.p+"assets/img/image-20201117185903668.5b19d0fa.png"},1154:function(e,t,s){e.exports=s.p+"assets/img/image-20201117185918518.48701ed7.png"},1155:function(e,t,s){e.exports=s.p+"assets/img/image-20201117190006428.fce10d13.png"},1156:function(e,t,s){e.exports=s.p+"assets/img/image-20201221143718889.140231f4.png"},1157:function(e,t,s){e.exports=s.p+"assets/img/image-20201221184147517.4aa5a090.png"},1158:function(e,t,s){e.exports=s.p+"assets/img/image-20201221185235129.b2360861.png"},1159:function(e,t,s){e.exports=s.p+"assets/img/image-20201221191719471.d3f2f3b6.png"},2003:function(e,t,s){"use strict";s.r(t);var a=s(17),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"kubernetes的介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes的介绍"}},[e._v("#")]),e._v(" kubernetes的介绍")]),e._v(" "),a("p",[e._v("学习链接：")]),e._v(" "),a("ul",[a("li",[e._v("尚硅谷kubernetes教程：https://pan.baidu.com/s/1U6-AXHj5gsDsAHSXeoKnRg 提取码：tdpk")]),e._v(" "),a("li",[e._v("https://jimmysong.io/kubernetes-handbook/concepts/")]),e._v(" "),a("li",[e._v("https://www.kubernetes.org.cn/k8s")]),e._v(" "),a("li",[e._v("https://kuboard.cn/learning/")])]),e._v(" "),a("p",[e._v("Kubernetes是一个可以移植、可扩展的开源平台，使用 "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-intermediate/workload/wl-deployment/#deployment-%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[e._v("声明式的配置"),a("OutboundLink")],1),e._v(" 并依据配置信息自动地执行容器化应用程序的管理。在所有的"),a("strong",[e._v("容器编排工具")]),e._v("中（类似的还有 docker swarm / mesos等），Kubernetes的生态系统更大、增长更快，"),a("strong",[e._v("有更多的支持、服务和工具")]),e._v("可供用户选择。")]),e._v(" "),a("p",[e._v("kubernetes起源于希腊，是领航员、舵手的意思。Google于2014年将Borg系统开源为Kubernetes。Kubernetes构建在Google "),a("strong",[e._v("Borg")]),e._v(" "),a("a",{attrs:{href:"https://ai.google/research/pubs/pub43438",target:"_blank",rel:"noopener noreferrer"}},[e._v("十五年运行大规模分布式系统的经验 (opens new window)"),a("OutboundLink")],1),e._v("基础之上，并结合了开源社区最好的想法和实践。")]),e._v(" "),a("p",[a("strong",[e._v("部署应用程序的方式")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1149),alt:"Kubernetes教程_部署方式演化"}})]),e._v(" "),a("p",[e._v("传统部署时代：企业直接将应用程序部署在物理机上。由于物理机上不能为应用程序定义资源使用边界，我们也就很难合理地分配计算资源")]),e._v(" "),a("p",[e._v("虚拟化部署时代：用户可以在单台物理机的CPU上运行多个虚拟机（Virtual Machine）。")]),e._v(" "),a("ul",[a("li",[e._v("虚拟化技术使得应用程序被虚拟机相互分隔开，限制了应用程序之间的非法访问，进而提供了一定程度的安全性。")]),e._v(" "),a("li",[e._v("虚拟化技术提高了物理机的资源利用率，可以更容易地安装或更新应用程序，降低了硬件成本，因此可以更好地规模化实施。")])]),e._v(" "),a("p",[e._v("容器化部署时代：容器与虚拟机类似，但是降低了隔离层级，共享了操作系统。因此，容器可以认为是轻量级的。")]),e._v(" "),a("p",[a("strong",[e._v("容器流行的好处")])]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("敏捷地创建和部署应用程序")]),e._v("：相较于创建虚拟机镜像，创建容器镜像更加容易和快速")]),e._v(" "),a("li",[a("strong",[e._v("分离开发和运维的关注点")]),e._v("：在开发构建阶段就完成容器镜像的构建，构建好的镜像可以部署到多种基础设施上。")]),e._v(" "),a("li",[a("strong",[e._v("松耦合、分布式、弹性、无约束的微服务")]),e._v("：应用程序被切分成更小的、独立的微服务，并可以动态部署和管理，而不是一个部署在专属机器上的庞大的单片应用程序")]),e._v(" "),a("li",[e._v("等等....")])]),e._v(" "),a("p",[a("strong",[e._v("kubernetes的功能")])]),e._v(" "),a("p",[e._v("Kubernetes可以处理应用程序的伸缩、failover、部署模式等多种需求。")]),e._v(" "),a("p",[e._v("Kubernetes提供的特性有：")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("服务发现和负载均衡")])]),e._v(" "),a("p",[e._v("Kubernetes 可以通过 DNS 名称或 IP 地址暴露容器的访问方式。并且可以在同组容器内分发负载以实现负载均衡")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("存储编排")])]),e._v(" "),a("p",[e._v("Kubernetes可以自动挂载指定的存储系统，例如 local stroage/nfs/云存储等")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("自动发布和回滚")])]),e._v(" "),a("p",[e._v("您可以在 Kubernetes 中声明您期望应用程序容器应该达到的状态，Kubernetes将以合适的速率调整容器的实际状态，并逐步达到最终期望的结果。请参考 "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-intermediate/workload/wl-deployment/#deployment-%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[e._v("声明式的配置"),a("OutboundLink")],1)])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("自愈")])]),e._v(" "),a("p",[e._v("Kubernetes提供如下自愈能力：")]),e._v(" "),a("ul",[a("li",[e._v("重启已经停机的容器")]),e._v(" "),a("li",[e._v("替换、kill 那些不满足自定义健康检查条件的容器")]),e._v(" "),a("li",[e._v("在容器就绪之前，避免调用者发现该容器")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("密钥及配置管理")])]),e._v(" "),a("p",[e._v("Kubernetes可以存储和管理敏感信息（例如，密码、OAuth token、ssh密钥等）。您可以更新容器应用程序的密钥、配置等信息，而无需：")]),e._v(" "),a("ul",[a("li",[e._v("重新构建容器的镜像")]),e._v(" "),a("li",[e._v("在不合适的地方暴露密码信息")])])])]),e._v(" "),a("p",[a("strong",[e._v("Kubernetes的边界")])]),e._v(" "),a("p",[e._v("Kubernetes不是一个传统意义的、保罗万象的 PaaS（Platform as a Service）系统。Kubernetes在容器层面工作，而不是硬件层面，它提供了与 PaaS 平台相似的通用特性，例如：部署、伸缩、负载均衡、日志、监控等。然而，Kubernetes并不是一个单一整体，这些特性都是可选、可插拔的。Kubernetes提供用于搭建开发平台的基础模块，同时为用户提供了不同模块的选择性和多样性。")]),e._v(" "),a("p",[e._v("Kubernetes：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("不限制应用程序的类型。Kubernetes的目标是广泛支持不同类型的工作负载，包括：有状态、无状态、数据处理等类型的应用。只要应用可以在容器中运行，就能够非常好地在 Kubernetes 上运行")])]),e._v(" "),a("li",[a("p",[e._v("不部署源码、不编译或构建应用程序。持续集成、分发、部署（CI/CD）的工作流极大程度上取决于组织的文化、偏好以及技术要求。Kubernetes可以作为部署平台参与到 CI/CD 流程，但是不涉及镜像构建和分发的过程")]),e._v(" "),a("blockquote",[a("p",[e._v("译者注：可选的有 Jenkins / Gitlab Runner / docker registry / harbour 等")])])]),e._v(" "),a("li",[a("p",[e._v("不提供应用程序级别的服务，包括：中间件（例如，消息总线）、数据处理框架（例如，Spark）、数据库（例如，mysql）、缓存（例如，Redis），或者分布式存储（例如，Ceph）。此类组件可以在 Kubernetes 上运行，或者可以被运行在 Kubernetes 上的应用程序访问")])]),e._v(" "),a("li",[a("p",[e._v("不限定日志、监控、报警的解决方案。Kubernetes 提供一些样例展示如何与日志、监控、报警等组件集成，同时提供收集、导出监控度量（metrics）的一套机制。您可以根据自己的需要选择日志、监控、报警组件")]),e._v(" "),a("blockquote",[a("p",[e._v("译者注：可选的有 ELK / Prometheus / Graphana / Pinpoint / Skywalking / Metrics Server 等")])])]),e._v(" "),a("li",[a("p",[e._v("不提供或者限定配置语言（例如，jsonnet）。Kubernetes提供一组声明式的 API，您可以按照自己的方式定义部署信息。")]),e._v(" "),a("blockquote",[a("p",[e._v("译者注：可选的有 helm/kustomize/kubectl/kubernetes dashboard/kuboard/octant/k9s 等")])])]),e._v(" "),a("li",[a("p",[e._v("不提供或限定任何机器的配置、维护、管理或自愈的系统。")]),e._v(" "),a("blockquote",[a("p",[e._v("译者注：在这个级别上，可选的组件有 puppet、ansible、open stack 等")])])]),e._v(" "),a("li",[a("p",[e._v("此外，Kubernetes不是一个纯粹意义上的容器编排系统。事实上，Kubernetes 消除了容器编排的需求。容器编排的技术定义是"),a("code",[e._v("预定义流程的执行")]),e._v("（先做A、再做B、然后做C）。与此相对应，Kubernetes构建了一系列相互独立、可预排的控制过程，以持续不断地将系统从当前状态调整到声明的目标状态。如何从 A 达到 C，并不重要。集中化的控制也就不需要了。这个设计思想使得Kubernetes使用更简单、更强大、稳健、反脆弱和可扩展。")])])]),e._v(" "),a("h2",{attrs:{id:"kubernetes架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes架构"}},[e._v("#")]),e._v(" kubernetes架构")]),e._v(" "),a("h3",{attrs:{id:"borg简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#borg简介"}},[e._v("#")]),e._v(" Borg简介")]),e._v(" "),a("p",[e._v("Borg是谷歌内部的大规模集群管理系统，负责对谷歌内部很多核心服务的调度和管理。Borg的目的是让用户能够不必操心资源管理的问题，让他们专注于自己的核心业务，并且做到跨多个数据中心的资源利用率最大化。")]),e._v(" "),a("p",[e._v("Borg主要由BorgMaster、Borglet、borgcfg和Scheduler组成，如下图所示")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1150),alt:"Borg架构"}})]),e._v(" "),a("ul",[a("li",[e._v("BorgMaster是整个集群的大脑，负责维护整个集群的状态，并将数据持久化到Paxos存储中；")]),e._v(" "),a("li",[e._v("Scheduer负责任务的调度，根据应用的特点将其调度到具体的机器上去；")]),e._v(" "),a("li",[e._v("Borglet负责真正运行任务（在容器中）；")]),e._v(" "),a("li",[e._v("borgcfg是Borg的命令行工具，用于跟Borg系统交互，一般通过一个配置文件来提交任务。")])]),e._v(" "),a("h3",{attrs:{id:"kubernetes架构-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes架构-2"}},[e._v("#")]),e._v(" kubernetes架构")]),e._v(" "),a("p",[e._v("Kubernetes借鉴了Borg的设计理念，比如Pod、Service、Label和单Pod单IP等。Kubernetes的整体架构跟Borg非常像，如下图所示。")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1151),alt:"Kubernetes架构"}})]),e._v(" "),a("p",[e._v("Kubernetes主要由以下几个核心组件组成：")]),e._v(" "),a("ul",[a("li",[e._v("etcd保存了整个集群的状态；")]),e._v(" "),a("li",[e._v("apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；")]),e._v(" "),a("li",[e._v("controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；")]),e._v(" "),a("li",[e._v("scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；")]),e._v(" "),a("li",[e._v("kubelet负责维护容器的生命周期，同时也负责Volume（CSI）和网络（CNI）的管理；")]),e._v(" "),a("li",[e._v("Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）；")]),e._v(" "),a("li",[e._v("kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；")])]),e._v(" "),a("p",[e._v("除了核心组件，还有一些推荐的插件，其中有的已经成为CNCF中的托管项目：")]),e._v(" "),a("ul",[a("li",[e._v("CoreDNS负责为整个集群提供DNS服务")]),e._v(" "),a("li",[e._v("Ingress Controller为服务提供外网入口")]),e._v(" "),a("li",[e._v("Prometheus提供资源监控")]),e._v(" "),a("li",[e._v("Dashboard提供GUI")]),e._v(" "),a("li",[e._v("Federation提供跨可用区的集群")])]),e._v(" "),a("p",[e._v("下图清晰表明了Kubernetes的架构设计以及组件之间的通信协议。")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1152),alt:"image-20201117182651823"}})]),e._v(" "),a("p",[e._v("下面是更抽象的一个视图：")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1153),alt:"image-20201117185903668"}})]),e._v(" "),a("p",[e._v("Master架构")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1154),alt:"image-20201117185918518"}})]),e._v(" "),a("p",[e._v("Node架构")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1155),alt:"image-20201117190006428"}})]),e._v(" "),a("h2",{attrs:{id:"kubernetes组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes组件"}},[e._v("#")]),e._v(" kubernetes组件")]),e._v(" "),a("h3",{attrs:{id:"master组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master组件"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#master%E7%BB%84%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[e._v("Master组件"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Master组件是集群的控制平台（control plane）：")]),e._v(" "),a("ul",[a("li",[e._v("master 组件负责集群中的全局决策（例如，调度）")]),e._v(" "),a("li",[e._v("master 组件探测并响应集群事件（例如，当 Deployment 的实际 Pod 副本数未达到 "),a("code",[e._v("replicas")]),e._v(" 字段的规定时，启动一个新的 Pod）")])]),e._v(" "),a("p",[e._v("Master组件可以运行于集群中的任何机器上。但是，为了简洁性，通常在同一台机器上运行所有的 master 组件，且不在此机器上运行用户的容器。参考 "),a("a",{attrs:{href:"https://kuboard.cn/install/install-kubernetes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装Kubernetes高可用"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"kube-apiserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kube-apiserver"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#kube-apiserver",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-apiserver"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("此 master 组件提供 Kubernetes API。这是Kubernetes控制平台的前端（front-end），可以水平扩展（通过部署更多的实例以达到性能要求）。kubectl / kubernetes dashboard / kuboard 等Kubernetes管理工具就是通过 kubernetes API 实现对 Kubernetes 集群的管理。")]),e._v(" "),a("h4",{attrs:{id:"etcd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etcd"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#etcd",target:"_blank",rel:"noopener noreferrer"}},[e._v("etcd"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("支持一致性和高可用的名值对存储组件，Kubernetes集群的所有配置信息都存储在 etcd 中。请确保您 "),a("a",{attrs:{href:"https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster",target:"_blank",rel:"noopener noreferrer"}},[e._v("备份 (opens new window)"),a("OutboundLink")],1),e._v("了 etcd 的数据。关于 etcd 的更多信息，可参考 "),a("a",{attrs:{href:"https://etcd.io/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("etcd 官方文档(opens new window)"),a("OutboundLink")],1)]),e._v(" "),a("h4",{attrs:{id:"kube-scheduler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kube-scheduler"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#kube-scheduler",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-scheduler"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("此 master 组件监控所有新创建尚未分配到节点上的 Pod，并且自动选择为 Pod 选择一个合适的节点去运行。")]),e._v(" "),a("p",[e._v("影响调度的因素有：")]),e._v(" "),a("ul",[a("li",[e._v("单个或多个 Pod 的资源需求")]),e._v(" "),a("li",[e._v("硬件、软件、策略的限制")]),e._v(" "),a("li",[e._v("亲和与反亲和（affinity and anti-affinity）的约定")]),e._v(" "),a("li",[e._v("数据本地化要求")]),e._v(" "),a("li",[e._v("工作负载间的相互作用")])]),e._v(" "),a("h4",{attrs:{id:"kube-controller-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kube-controller-manager"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#kube-controller-manager",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-controller-manager"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("此 master 组件运行了所有的控制器")]),e._v(" "),a("p",[e._v("逻辑上来说，每一个控制器是一个独立的进程，但是为了降低复杂度，这些控制器都被合并运行在一个进程里。")]),e._v(" "),a("p",[e._v("kube-controller-manager 中包含的控制器有：")]),e._v(" "),a("ul",[a("li",[e._v("节点控制器： 负责监听节点停机的事件并作出对应响应")]),e._v(" "),a("li",[e._v("副本控制器： 负责为集群中每一个 副本控制器对象（Replication Controller Object）维护期望的 Pod 副本数")]),e._v(" "),a("li",[e._v("端点（Endpoints）控制器：负责为端点对象（Endpoints Object，连接 Service 和 Pod）赋值")]),e._v(" "),a("li",[e._v("Service Account & Token控制器： 负责为新的名称空间创建 default Service Account 以及 API Access Token")])]),e._v(" "),a("h3",{attrs:{id:"node-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-组件"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#node-%E7%BB%84%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node 组件"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Node 组件运行在每一个节点上（包括 master 节点和 worker 节点），负责维护运行中的 Pod 并提供 Kubernetes 运行时环境。")]),e._v(" "),a("h4",{attrs:{id:"kubelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubelet"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#kubelet",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubelet"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("此组件是运行在每一个集群节点上的代理程序。它确保 Pod 中的容器处于运行状态。Kubelet 通过多种途径获得 PodSpec 定义，并确保 PodSpec 定义中所描述的容器处于运行和健康的状态。Kubelet不管理不是通过 Kubernetes 创建的容器。")]),e._v(" "),a("h4",{attrs:{id:"kube-proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kube-proxy"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#kube-proxy",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-proxy"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-intermediate/service/service-details.html#%E8%99%9A%E6%8B%9F-ip-%E5%92%8C%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-proxy"),a("OutboundLink")],1),e._v(" 是一个网络代理程序，运行在集群中的每一个节点上，是实现 Kubernetes Service 概念的重要部分。")]),e._v(" "),a("p",[e._v("kube-proxy 在节点上维护网络规则。这些网络规则使得您可以在集群内、集群外正确地与 Pod 进行网络通信。如果操作系统中存在 packet filtering layer，kube-proxy 将使用这一特性（"),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-intermediate/service/service-details.html#iptables-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[e._v("iptables代理模式"),a("OutboundLink")],1),e._v("），否则，kube-proxy将自行转发网络请求（"),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-intermediate/service/service-details.html#user-space-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[e._v("User space代理模式"),a("OutboundLink")],1),e._v("）")]),e._v(" "),a("h4",{attrs:{id:"容器引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器引擎"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E",target:"_blank",rel:"noopener noreferrer"}},[e._v("容器引擎"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("容器引擎负责运行容器。Kubernetes支持多种容器引擎："),a("a",{attrs:{href:"http://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker (opens new window)"),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://containerd.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("containerd (opens new window)"),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://cri-o.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("cri-o (opens new window)"),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://github.com/kubernetes-incubator/rktlet",target:"_blank",rel:"noopener noreferrer"}},[e._v("rktlet (opens new window)"),a("OutboundLink")],1),e._v("以及任何实现了 "),a("a",{attrs:{href:"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes容器引擎接口 (opens new window)"),a("OutboundLink")],1),e._v("的容器引擎")]),e._v(" "),a("h3",{attrs:{id:"addons"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addons"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#addons",target:"_blank",rel:"noopener noreferrer"}},[e._v("Addons"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("addons叫做附加组件或者插件。")]),e._v(" "),a("p",[e._v("Addons 使用 Kubernetes 资源（DaemonSet、Deployment等）实现集群的功能特性。由于他们提供集群级别的功能特性，addons使用到的Kubernetes资源都放置在 "),a("code",[e._v("kube-system")]),e._v(" 名称空间下。")]),e._v(" "),a("p",[e._v("下面描述了一些经常用到的 addons，参考 "),a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/cluster-administration/addons/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Addons (opens new window)"),a("OutboundLink")],1),e._v("查看更多列表。")]),e._v(" "),a("h4",{attrs:{id:"dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#dns",target:"_blank",rel:"noopener noreferrer"}},[e._v("DNS"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("除了 DNS Addon 以外，其他的 addon 都不是必须的，所有 Kubernetes 集群都应该有 "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-intermediate/service/dns.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cluster DNS"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Cluster DNS 是一个 DNS 服务器，是对您已有环境中其他 DNS 服务器的一个补充，存放了 Kubernetes Service 的 DNS 记录。")]),e._v(" "),a("p",[e._v("Kubernetes 启动容器时，自动将该 DNS 服务器加入到容器的 DNS 搜索列表中。")]),e._v(" "),a("blockquote",[a("p",[e._v("如果您参考 www.kuboard.cn 上提供的文档安装 Kubernetes，默认已经安装了 "),a("a",{attrs:{href:"https://coredns.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Core DNS(opens new window)"),a("OutboundLink")],1)])]),e._v(" "),a("h4",{attrs:{id:"web-ui-dashboard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-ui-dashboard"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#web-ui-dashboard",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web UI（Dashboard）"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dashboard (opens new window)"),a("OutboundLink")],1),e._v("是一个Kubernetes集群的 Web 管理界面。用户可以通过该界面管理集群。")]),e._v(" "),a("h4",{attrs:{id:"kuboard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kuboard"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#kuboard",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kuboard"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kuboard.cn/install/install-dashboard.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kuboard"),a("OutboundLink")],1),e._v(" 是一款基于Kubernetes的微服务管理界面，相较于 Dashboard，Kuboard 强调：")]),e._v(" "),a("ul",[a("li",[e._v("无需手工编写 YAML 文件")]),e._v(" "),a("li",[e._v("微服务参考架构")]),e._v(" "),a("li",[e._v("上下文相关的监控")]),e._v(" "),a("li",[e._v("场景化的设计\n"),a("ul",[a("li",[e._v("导出配置")]),e._v(" "),a("li",[e._v("导入配置")])])])]),e._v(" "),a("h4",{attrs:{id:"containerresource-monitoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#containerresource-monitoring"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#containerresource-monitoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("ContainerResource Monitoring"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Container Resource Monitoring (opens new window)"),a("OutboundLink")],1),e._v("将容器的度量指标（metrics）记录在时间序列数据库中，并提供了 UI 界面查看这些数据")]),e._v(" "),a("h4",{attrs:{id:"cluster-level-logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cluster-level-logging"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/learning/k8s-bg/component.html#cluster-level-logging",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cluster-level Logging"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/cluster-administration/logging/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cluster-level logging (opens new window)"),a("OutboundLink")],1),e._v("机制负责将容器的日志存储到一个统一存储中，并提供搜索浏览的界面")]),e._v(" "),a("h2",{attrs:{id:"kubernetes安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes安装"}},[e._v("#")]),e._v(" kubernetes安装")]),e._v(" "),a("h3",{attrs:{id:"单节点安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单节点安装"}},[e._v("#")]),e._v(" 单节点安装")]),e._v(" "),a("p",[e._v("配置要求：")]),e._v(" "),a("ul",[a("li",[e._v("至少2台 "),a("strong",[e._v("2核4G")]),e._v(" 的服务器")]),e._v(" "),a("li",[a("strong",[e._v("Cent OS 7.6 / 7.7 / 7.8")])])]),e._v(" "),a("p",[a("strong",[e._v("安装后的软件版本为")])]),e._v(" "),a("ul",[a("li",[e._v("Kubernetes v1.19.x\n"),a("ul",[a("li",[e._v("calico 3.13.1")]),e._v(" "),a("li",[e._v("nginx-ingress 1.5.5")])])]),e._v(" "),a("li",[e._v("Docker 19.03.11")])]),e._v(" "),a("p",[e._v("安装前置条件：")]),e._v(" "),a("ul",[a("li",[e._v("任意节点 centos 版本为 7.6 / 7.7 或 7.8")]),e._v(" "),a("li",[e._v("任意节点 CPU 内核数量大于等于 2，且内存大于等于 4G")]),e._v(" "),a("li",[e._v("任意节点 hostname 不是 localhost，且不包含下划线、小数点、大写字母")]),e._v(" "),a("li",[e._v("任意节点都有固定的内网 IP 地址")]),e._v(" "),a("li",[e._v("任意节点都只有一个网卡，如果有特殊目的，我可以在完成 K8S 安装后再增加新的网卡")]),e._v(" "),a("li",[e._v("任意节点上 Kubelet使用的 IP 地址 可互通（无需 NAT 映射即可相互访问），且没有防火墙、安全组隔离")]),e._v(" "),a("li",[e._v("任意节点不会直接使用 docker run 或 docker-compose 运行容器")])]),e._v(" "),a("h4",{attrs:{id:"下载centos镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载centos镜像"}},[e._v("#")]),e._v(" 下载centos镜像")]),e._v(" "),a("p",[e._v("centos iso文件下载链接：")]),e._v(" "),a("ul",[a("li",[e._v("https://mirrors.aliyun.com/centos/?spm=a2c6h.13651104.0.0.5f6612b2AyMJ5i")]),e._v(" "),a("li",[e._v("http://vault.centos.org/")]),e._v(" "),a("li",[e._v("https://vault.centos.org/7.7.1908/isos/x86_64/")])]),e._v(" "),a("h4",{attrs:{id:"检查-centos-hostname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查-centos-hostname"}},[e._v("#")]),e._v(" 检查 centos / hostname")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 在 master 节点和 worker 节点都要执行")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /etc/redhat-release\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 此处 hostname 的输出将会是该机器在 Kubernetes 集群中的节点名字")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 不能使用 localhost 作为节点的名字")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("hostname")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 请使用 lscpu 命令，核对 CPU 信息")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Architecture: x86_64    本安装文档不支持 arm 架构")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## CPU(s):       2         CPU 内核数量不能低于 2")]),e._v("\nlscpu\n")])])]),a("p",[e._v("设置hostname:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 修改 hostname")]),e._v("\nhostnamectl set-hostname your-new-host-name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 查看修改结果")]),e._v("\nhostnamectl status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 设置 hostname 解析")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"127.0.0.1   '),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("hostname")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/hosts\n")])])]),a("p",[e._v("修改cpu数量的方法：")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1156),alt:"image-20201221143718889"}})]),e._v(" "),a("h4",{attrs:{id:"检查网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查网络"}},[e._v("#")]),e._v(" 检查网络")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("root@demo-master-a-1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),e._v(" route show\ndefault via "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("172.21")]),e._v(".0.1 dev eth0 \n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("169.254")]),e._v(".0.0/16 dev eth0 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("link")]),e._v(" metric "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1002")]),e._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("172.21")]),e._v(".0.0/20 dev eth0 proto kernel scope "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("link")]),e._v(" src "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("172.21")]),e._v(".0.12 \n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("root@demo-master-a-1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),e._v(" address\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("LOOPBACK,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("65536")]),e._v(" qdisc noqueue state UNKNOWN group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1/8 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v(" lo\n       valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(": eth0: "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1500")]),e._v(" qdisc pfifo_fast state UP group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v("\n    link/ether 00:16:3e:12:a4:1b brd ff:ff:ff:ff:ff:ff\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("172.17")]),e._v(".216.80/20 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("172.17")]),e._v(".223.255 scope global dynamic eth0\n       valid_lft 305741654sec preferred_lft 305741654sec\n")])])]),a("p",[e._v("kubelet使用的IP地址")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ip route show")]),e._v(" 命令中，可以知道机器的默认网卡，通常是 "),a("code",[e._v("eth0")]),e._v("，如 "),a("em",[a("strong",[e._v("default via 172.21.0.23 dev eth0")])])]),e._v(" "),a("li",[a("code",[e._v("ip address")]),e._v(" 命令中，可显示默认网卡的 IP 地址，Kubernetes 将使用此 IP 地址与集群内的其他节点通信，如 "),a("code",[e._v("172.17.216.80")])]),e._v(" "),a("li",[e._v("所有节点上 Kubernetes 所使用的 IP 地址必须可以互通（无需 NAT 映射、无安全组或防火墙隔离）")])]),e._v(" "),a("p",[a("strong",[e._v("配置静态ip：")])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" /etc/sysconfig/network-scripts/ifcfg-ens33 \n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Ethernet"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PROXY_METHOD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"none"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("BROWSER_ONLY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"no"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("BOOTPROTO")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"static"')]),e._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#这里要修改成static")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DEFROUTE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"yes"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("IPV4_FAILURE_FATAL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"no"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("IPV6INIT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"yes"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("IPV6_AUTOCONF")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"yes"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("IPV6_DEFROUTE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"yes"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("IPV6_FAILURE_FATAL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"no"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("IPV6_ADDR_GEN_MODE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"stable-privacy"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ens33"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("UUID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0c00c122-c1b4-4677-ac88-94f992fe0346"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DEVICE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ens33"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ONBOOT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"yes"')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("IPADDR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"192.168.72.137"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("NETMASK")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"255.255.255.0"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GATEWAY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"192.168.72.1"')]),e._v("\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("systemctl restart network\n")])])]),a("p",[a("strong",[e._v("关掉防火墙：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("systemctl stop firewalld\nsystemctl disable firewalld\n")])])]),a("h4",{attrs:{id:"安装docker及kubelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装docker及kubelet"}},[e._v("#")]),e._v(" 安装docker及kubelet")]),e._v(" "),a("p",[e._v("可选择快速安装或者手动安装方式。")]),e._v(" "),a("h5",{attrs:{id:"快速安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速安装"}},[e._v("#")]),e._v(" 快速安装")]),e._v(" "),a("p",[e._v("使用 root 身份在所有节点执行如下代码，以安装软件：")]),e._v(" "),a("ul",[a("li",[e._v("docker")]),e._v(" "),a("li",[e._v("nfs-utils")]),e._v(" "),a("li",[e._v("kubectl / kubeadm / kubelet")])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 在 master 节点和 worker 节点都要执行")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 最后一个参数 1.19.5 用于指定 kubenetes 版本，支持所有 1.19.x 版本的安装")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 腾讯云 docker hub 镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## export REGISTRY_MIRROR="https://mirror.ccs.tencentyun.com"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DaoCloud 镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## export REGISTRY_MIRROR="http://f1361db2.m.daocloud.io"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 华为云镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## export REGISTRY_MIRROR="https://05f073ad3c0010ea0f4bc00b7105ec20.mirror.swr.myhuaweicloud.com"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 阿里云 docker hub 镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("REGISTRY_MIRROR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://registry.cn-hangzhou.aliyuncs.com\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -sSL https://kuboard.cn/install-script/v1.19.x/install_kubelet.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v(" -s "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.19")]),e._v(".5\n")])])]),a("p",[a("strong",[e._v("请将脚本最后的 1.19.5 替换成需要的版本号，")]),e._v(" 脚本中间的 v1.19.x 不要替换")]),e._v(" "),a("blockquote",[a("p",[e._v("docker hub 镜像请根据自己网络的情况任选一个")]),e._v(" "),a("ul",[a("li",[e._v("第四行为腾讯云 docker hub 镜像")]),e._v(" "),a("li",[e._v("第六行为DaoCloud docker hub 镜像")]),e._v(" "),a("li",[e._v("第八行为华为云 docker hub 镜像")]),e._v(" "),a("li",[e._v("第十行为阿里云 docker hub 镜像")])])]),e._v(" "),a("h5",{attrs:{id:"手动安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动安装"}},[e._v("#")]),e._v(" 手动安装")]),e._v(" "),a("p",[e._v("手动执行以下代码，结果与快速安装相同。"),a("em",[a("strong",[e._v("请将脚本第79行（已高亮）的 ${1} 替换成您需要的版本号，例如 1.19.5")])])]),e._v(" "),a("blockquote",[a("p",[e._v("docker hub 镜像请根据自己网络的情况任选一个")]),e._v(" "),a("ul",[a("li",[e._v("第四行为腾讯云 docker hub 镜像")]),e._v(" "),a("li",[e._v("第六行为DaoCloud docker hub 镜像")]),e._v(" "),a("li",[e._v("第八行为阿里云 docker hub 镜像")])])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 在 master 节点和 worker 节点都要执行")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 最后一个参数 1.19.5 用于指定 kubenetes 版本，支持所有 1.19.x 版本的安装")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 腾讯云 docker hub 镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## export REGISTRY_MIRROR="https://mirror.ccs.tencentyun.com"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DaoCloud 镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## export REGISTRY_MIRROR="http://f1361db2.m.daocloud.io"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 阿里云 docker hub 镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("REGISTRY_MIRROR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://registry.cn-hangzhou.aliyuncs.com\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/bash")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 在 master 节点和 worker 节点都要执行")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 安装 docker")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 参考文档如下")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## https://docs.docker.com/install/linux/docker-ce/centos/ ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## https://docs.docker.com/install/linux/linux-postinstall/")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 卸载旧版本")]),e._v("\nyum remove -y docker "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-client "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-client-latest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-ce-cli "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-common "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-latest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-latest-logrotate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-logrotate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-selinux "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-engine-selinux "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndocker-engine\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 设置 yum repository")]),e._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y yum-utils "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ndevice-mapper-persistent-data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\nlvm2\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 安装并启动 docker")]),e._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y docker-ce-19.03.11 docker-ce-cli-19.03.11 containerd.io-1.2.13\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" /etc/docker "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/docker/daemon.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('EOF\n{\n  "registry-mirrors": ["'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${REGISTRY_MIRROR}")]),e._v('"],\n  "exec-opts": ["native.cgroupdriver=systemd"],\n  "log-driver": "json-file",\n  "log-opts": {\n    "max-size": "100m"\n  },\n  "storage-driver": "overlay2",\n  "storage-opts": [\n    "overlay2.override_kernel_check=true"\n  ]\n}\nEOF')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p /etc/systemd/system/docker.service.d\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Restart Docker")]),e._v("\nsystemctl daemon-reload\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" docker\nsystemctl restart docker\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 安装 nfs-utils")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 必须先安装 nfs-utils 才能挂载 nfs 网络存储")]),e._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y nfs-utils\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 关闭 防火墙")]),e._v("\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 关闭 SeLinux")]),e._v("\nsetenforce "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s/SELINUX=enforcing/SELINUX=disabled/g"')]),e._v(" /etc/selinux/config\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 关闭 swap")]),e._v("\nswapoff -a\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("yes")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" /etc/fstab /etc/fstab_bak\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /etc/fstab_bak "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -v swap "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/fstab\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 修改 /etc/sysctl.conf")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 如果有配置，则修改")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"')]),e._v("  /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"')]),e._v("  /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"')]),e._v("  /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g"')]),e._v("  /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g"')]),e._v("  /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g"')]),e._v("  /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g"')]),e._v("  /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 可能没有，追加")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"net.ipv4.ip_forward = 1"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"net.bridge.bridge-nf-call-ip6tables = 1"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"net.bridge.bridge-nf-call-iptables = 1"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"net.ipv6.conf.all.disable_ipv6 = 1"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"net.ipv6.conf.default.disable_ipv6 = 1"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"net.ipv6.conf.lo.disable_ipv6 = 1"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"net.ipv6.conf.all.forwarding = 1"')]),e._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 执行命令以应用")]),e._v("\nsysctl -p\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 配置K8S的yum源")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/yum.repos.d/kubernetes.repo")]),e._v("\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 卸载旧版本")]),e._v("\nyum remove -y kubelet kubeadm kubectl\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 安装kubelet、kubeadm、kubectl")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 将 ${1} 替换为 kubernetes 版本号，例如 1.19.0")]),e._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y kubelet-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${1}")]),e._v(" kubeadm-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${1}")]),e._v(" kubectl-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${1}")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 重启 docker，并启动 kubelet")]),e._v("\nsystemctl daemon-reload\nsystemctl restart docker\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" kubelet "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" systemctl start kubelet\n\ndocker version\n\n")])])]),a("blockquote",[a("p",[e._v("WARNING")]),e._v(" "),a("p",[e._v("如果此时执行 "),a("code",[e._v("systemctl status kubelet")]),e._v(" 命令，将得到 kubelet 启动失败的错误提示，请忽略此错误，因为必须完成后续步骤中 kubeadm init 的操作，kubelet 才能正常启动")])]),e._v(" "),a("h4",{attrs:{id:"初始化-master-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化-master-节点"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://kuboard.cn/install/install-k8s.html#%E5%88%9D%E5%A7%8B%E5%8C%96-master-%E8%8A%82%E7%82%B9",target:"_blank",rel:"noopener noreferrer"}},[e._v("初始化 master 节点"),a("OutboundLink")],1)]),e._v(" "),a("h5",{attrs:{id:"快速初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速初始化"}},[e._v("#")]),e._v(" 快速初始化")]),e._v(" "),a("p",[a("strong",[e._v("请将脚本最后的 1.19.5 替换成您需要的版本号，")]),e._v(" 脚本中间的 v1.19.x 不要替换")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 替换 x.x.x.x 为 master 节点实际 IP（请使用内网 IP）")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MASTER_IP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x.x.x.x\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 替换 apiserver.demo 为 您想要的 dnsName")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("APISERVER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("apiserver.demo\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("POD_SUBNET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10.100")]),e._v(".0.1/16\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MASTER_IP}")]),e._v("    "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${APISERVER_NAME}")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/hosts\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -sSL https://kuboard.cn/install-script/v1.19.x/init_master.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v(" -s "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.19")]),e._v(".5\n\n")])])]),a("h5",{attrs:{id:"手动初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动初始化"}},[e._v("#")]),e._v(" 手动初始化")]),e._v(" "),a("p",[e._v("手动执行以下代码，结果与快速初始化相同。"),a("em",[a("strong",[e._v("请将脚本第21行（已高亮）的 ${1} 替换成您需要的版本号，例如 1.19.5")])])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 替换 x.x.x.x 为 master 节点的内网IP")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MASTER_IP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x.x.x.x\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 替换 apiserver.demo 为 您想要的 dnsName")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("APISERVER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("apiserver.demo\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("POD_SUBNET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10.100")]),e._v(".0.1/16\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MASTER_IP}")]),e._v("    "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${APISERVER_NAME}")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/hosts\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/bash")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 脚本出错时终止执行")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" -e\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("#")]),e._v("POD_SUBNET}")]),e._v(" -eq "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("#")]),e._v("APISERVER_NAME}")]),e._v(" -eq "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\033"}},[e._v("\\033")]),e._v("[31;1m请确保您已经设置了环境变量 POD_SUBNET 和 APISERVER_NAME "),a("span",{pre:!0,attrs:{class:"token entity",title:"\\033"}},[e._v("\\033")]),e._v('[0m"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" 当前POD_SUBNET"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$POD_SUBNET")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" 当前APISERVER_NAME"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$APISERVER_NAME")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -f ./kubeadm-config.yaml\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ./kubeadm-config.yaml")]),e._v('\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: 1.18.9\nimageRepository: registry.aliyuncs.com/k8sxio\ncontrolPlaneEndpoint: "'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${APISERVER_NAME}")]),e._v(':6443"\nnetworking:\n  serviceSubnet: "10.96.0.0/16"\n  podSubnet: "'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${POD_SUBNET}")]),e._v('"\n  dnsDomain: "cluster.local"\nEOF')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## kubeadm init")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 根据您服务器网速的情况，您需要等候 3 - 10 分钟")]),e._v("\nkubeadm config images pull --config"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kubeadm-config.yaml\nkubeadm init --config"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kubeadm-config.yaml --upload-certs\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 配置 kubectl")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf /root/.kube/\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" /root/.kube/\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf /root/.kube/config\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 安装 calico 网络插件")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 参考文档 https://docs.projectcalico.org/v3.13/getting-started/kubernetes/self-managed-onprem/onpremises")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"安装calico-3.13.1"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -f calico-3.13.1.yaml\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://kuboard.cn/install-script/calico/calico-3.13.1.yaml\nkubectl apply -f calico-3.13.1.yaml\n\n")])])]),a("p",[a("strong",[e._v("如果master初始化出错：")])]),e._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[e._v("请确保使用 root 用户执行初始化命令")])]),e._v(" "),a("li",[a("p",[e._v("不能下载 kubernetes 的 docker 镜像")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("安装文档中，默认使用阿里云的 docker 镜像仓库，然而，有时候，该镜像会罢工")])]),e._v(" "),a("li",[a("p",[e._v("如碰到不能下载 docker 镜像的情况，请尝试手工初始化，并修改手工初始化脚本里的第22行（文档中已高亮）为：")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("imageRepository")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" gcr.azk8s.cn/google"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("containers\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("检查环境变量，执行如下命令")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MASTER_IP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MASTER_IP}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("APISERVER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${APISERVER_NAME}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("POD_SUBNET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${POD_SUBNET}")]),e._v("\n")])])]),a("p",[e._v("请验证如下几点：")]),e._v(" "),a("ul",[a("li",[e._v("环境变量 "),a("em",[a("strong",[e._v("MASTER_IP")])]),e._v(" 的值应该为 master 节点的 "),a("strong",[e._v("内网IP")]),e._v("，如果不是，请重新 export")]),e._v(" "),a("li",[a("strong",[e._v("APISERVER_NAME")]),e._v(" 不能是 master 的 hostname")]),e._v(" "),a("li",[a("strong",[e._v("APISERVER_NAME")]),e._v(" 必须全为小写字母、数字、小数点，不能包含减号")]),e._v(" "),a("li",[a("strong",[e._v("POD_SUBNET")]),e._v(" 所使用的网段不能与 "),a("em",[a("strong",[e._v("master节点/worker节点")])]),e._v(" 所在的网段重叠。该字段的取值为一个 "),a("a",{attrs:{href:"https://kuboard.cn/glossary/cidr.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("CIDR"),a("OutboundLink")],1),e._v(" 值，如果您对 CIDR 这个概念还不熟悉，请仍然执行 export POD_SUBNET=10.100.0.1/16 命令，不做修改")])])]),e._v(" "),a("li",[a("p",[e._v("重新初始化 master 节点前，请先执行 "),a("code",[e._v("kubeadm reset -f")]),e._v(" 操作")])])])]),e._v(" "),a("h5",{attrs:{id:"检查-master-初始化结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查-master-初始化结果"}},[e._v("#")]),e._v(" 检查 master 初始化结果")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("watch")]),e._v(" kubectl get pod -n kube-system -o wide\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 查看 master 节点初始化结果")]),e._v("\nkubectl get nodes -o wide\n\n")])])]),a("p",[e._v("可能会出现pending或者Failed to pull image的问题，需要稍微等久一点，从下面的图可以看出花了21分钟才全部处于Running状态：")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1157),alt:"image-20201221184147517"}})]),e._v(" "),a("p",[a("img",{attrs:{src:s(1158),alt:"image-20201221185235129"}})]),e._v(" "),a("p",[e._v("出现错误的解决方法：")]),e._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[e._v("ImagePullBackoff / Pending")]),e._v(" "),a("ul",[a("li",[e._v("如果 "),a("code",[e._v("kubectl get pod -n kube-system -o wide")]),e._v(" 的输出结果中出现 ImagePullBackoff 或者长时间处于 Pending 的情况，请参考 "),a("a",{attrs:{href:"https://kuboard.cn/learning/faq/image-pull-backoff.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看镜像抓取进度"),a("OutboundLink")],1)])])]),e._v(" "),a("li",[a("p",[e._v("ContainerCreating")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("如果"),a("code",[e._v("kubectl get pod -n kube-system -o wide")]),e._v("的输出结果中某个 Pod 长期处于 ContainerCreating、PodInitializing 或 Init:0/3 的状态，可以尝试：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("查看该 Pod 的状态，例如：")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("kubectl describe pod kube-flannel-ds-amd64-8l25c -n kube-system\n")])])]),a("p",[e._v("如果输出结果中，最后一行显示的是 Pulling image，请耐心等待，或者参考")]),e._v(" "),a("p",[e._v("查看镜像抓取进度")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Normal  Pulling    44s   kubelet, k8s-worker-02  Pulling image "quay.io/coreos/flannel:v0.12.0-amd64"\n')])])])]),e._v(" "),a("li",[a("p",[e._v("将该 Pod 删除，系统会自动重建一个新的 Pod，例如：")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("kubectl delete pod kube-flannel-ds-amd64-8l25c -n kube-system\n")])])])])])])])])])]),e._v(" "),a("h4",{attrs:{id:"初始化worker节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化worker节点"}},[e._v("#")]),e._v(" 初始化worker节点")]),e._v(" "),a("p",[e._v("针对所有worker节点执行：")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 worker 节点执行")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 替换 x.x.x.x 为 master 节点的内网 IP")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MASTER_IP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x.x.x.x\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 替换 apiserver.demo 为初始化 master 节点时所使用的 APISERVER_NAME")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("APISERVER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("apiserver.demo\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MASTER_IP}")]),e._v("    "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${APISERVER_NAME}")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/hosts\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 替换为 master 节点上 kubeadm token create 命令的输出")]),e._v("\nkubeadm "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" apiserver.demo:6443 --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303\n\n")])])]),a("p",[e._v("把worker节点添加进来后，看下图，需要大概10分钟的时间去转为Ready状态，一开始为Not Ready状态。")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1159),alt:"image-20201221191719471"}})]),e._v(" "),a("p",[a("strong",[e._v("出错处理")])]),e._v(" "),a("blockquote",[a("h4",{attrs:{id:"常见错误原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见错误原因"}},[e._v("#")]),e._v(" 常见错误原因")]),e._v(" "),a("p",[e._v("经常在群里提问为什么 join 不成功的情况大致有这几种：")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kuboard.cn/install/install-k8s.html#worker-%E8%8A%82%E7%82%B9%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE-apiserver",target:"_blank",rel:"noopener noreferrer"}},[e._v("worker 节点不能访问 apiserver"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("在worker节点执行以下语句可验证worker节点是否能访问 apiserver")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -ik https://apiserver.demo:6443\n")])])]),a("p",[e._v("如果不能，请在 master 节点上验证")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -ik https://localhost:6443\n")])])]),a("p",[e._v("正常输出结果如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('HTTP/1.1 403 Forbidden\nCache-Control: no-cache, private\nContent-Type: application/json\nX-Content-Type-Options: nosniff\nDate: Fri, 15 Nov 2019 04:34:40 GMT\nContent-Length: 233\n\n{\n  "kind": "Status",\n  "apiVersion": "v1",\n  "metadata": {\n...\n')])])]),a("p",[e._v("可能原因")]),e._v(" "),a("ul",[a("li",[e._v("如果 master 节点能够访问 apiserver、而 worker 节点不能，则请检查自己的网络设置\n"),a("ul",[a("li",[e._v("/etc/hosts 是否正确设置？")]),e._v(" "),a("li",[e._v("是否有安全组或防火墙的限制？")])])])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kuboard.cn/install/install-k8s.html#worker-%E8%8A%82%E7%82%B9%E9%BB%98%E8%AE%A4%E7%BD%91%E5%8D%A1",target:"_blank",rel:"noopener noreferrer"}},[e._v("worker 节点默认网卡"),a("OutboundLink")],1)]),e._v(" "),a("ul",[a("li",[e._v("Kubelet使用的 IP 地址与 master 节点可互通（无需 NAT 映射），且没有防火墙、安全组隔离\n"),a("ul",[a("li",[e._v("如果你使用 vmware 或 virtualbox 创建虚拟机用于 K8S 学习，可以尝试 NAT 模式的网络，而不是桥接模式的网络")])])])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kuboard.cn/install/install-k8s.html#%E7%A7%BB%E9%99%A4worker%E8%8A%82%E7%82%B9%E5%B9%B6%E9%87%8D%E8%AF%95",target:"_blank",rel:"noopener noreferrer"}},[e._v("移除worker节点并重试"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("WARNING")]),e._v(" "),a("p",[e._v("正常情况下，您无需移除 worker 节点，如果添加到集群出错，您可以移除 worker 节点，再重新尝试添加")]),e._v(" "),a("p",[e._v("在准备移除的 worker 节点上执行")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 worker 节点执行")]),e._v("\nkubeadm reset -f\n")])])]),a("p",[e._v("在 master 节点 demo-master-a-1 上执行")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\nkubectl get nodes -o wide\n")])])]),a("p",[e._v("如果列表中没有您要移除的节点，则忽略下一个步骤")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\nkubectl delete node demo-worker-x-x  \n")])])]),a("p",[e._v("TIP")]),e._v(" "),a("ul",[a("li",[e._v("将 demo-worker-x-x 替换为要移除的 worker 节点的名字")]),e._v(" "),a("li",[e._v("worker 节点的名字可以通过在节点 demo-master-a-1 上执行 kubectl get nodes 命令获得")])])]),e._v(" "),a("h5",{attrs:{id:"检查初始化结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查初始化结果"}},[e._v("#")]),e._v(" 检查初始化结果")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("## 只在 master 节点执行\nkubectl get nodes -o wide\n")])])]),a("p",[e._v("结果格式如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@node03 imagetars]## kubectl get nodes -o wide\nNAME     STATUS   ROLES    AGE   VERSION   INTERNAL-IP       EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME\nnode01   Ready    master   63m   v1.19.5   192.168.116.101   <none>        CentOS Linux 7 (Core)   3.10.0-1062.el7.x86_64   docker://19.3.11\nnode02   Ready    <none>   22m   v1.19.5   192.168.116.102   <none>        CentOS Linux 7 (Core)   3.10.0-1062.el7.x86_64   docker://19.3.11\n")])])]),a("h4",{attrs:{id:"安装ingress-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装ingress-controller"}},[e._v("#")]),e._v(" 安装Ingress Controller")]),e._v(" "),a("p",[e._v("快速初始化：")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\nkubectl apply -f https://kuboard.cn/install-script/v1.19.x/nginx-ingress.yaml\n")])])]),a("p",[e._v("如果想使用其它的 Ingress Controller，卸载Ingress Controller的方式如下：")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 只在 master 节点执行")]),e._v("\nkubectl delete -f https://kuboard.cn/install-script/v1.19.x/nginx-ingress.yaml\n")])])]),a("blockquote",[a("p",[e._v("如果打算将 Kubernetes 用于生产环境，请参考此文档 "),a("a",{attrs:{href:"https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Installing Ingress Controller (opens new window)"),a("OutboundLink")],1),e._v("，完善 Ingress 的配置。")])]),e._v(" "),a("h3",{attrs:{id:"高可用安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高可用安装"}},[e._v("#")]),e._v(" 高可用安装")]),e._v(" "),a("h2",{attrs:{id:"重启kubernetes集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重启kubernetes集群"}},[e._v("#")]),e._v(" 重启kubernetes集群")]),e._v(" "),a("p",[e._v("Kubernetes集群的设计目标是"),a("strong",[e._v("setup-and-run-forever")]),e._v("，使用虚拟机学习，会出现反复重启集群所在虚拟机的情况。下面是重启后可能出现的问题的解释。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kuboard.cn/install/k8s-restart.html#worker%E8%8A%82%E7%82%B9%E4%B8%8D%E8%83%BD%E5%90%AF%E5%8A%A8",target:"_blank",rel:"noopener noreferrer"}},[e._v("Worker节点不能启动"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Master 节点的 IP 地址变化，导致 worker 节点不能启动。请重装集群，并确保所有节点都有固定内网 IP 地址。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kuboard.cn/install/k8s-restart.html#%E8%AE%B8%E5%A4%9Apod%E4%B8%80%E7%9B%B4crash%E6%88%96%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE",target:"_blank",rel:"noopener noreferrer"}},[e._v("许多Pod一直Crash或不能正常访问"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("kubectl get pods --all-namespaces\n")])])]),a("p",[e._v("重启后会发现许多 Pod 不在 Running 状态，此时，请使用如下命令删除这些状态不正常的 Pod。通常，您的 Pod 如果是使用 Deployment、StatefulSet 等控制器创建的，kubernetes 将创建新的 Pod 作为替代，重新启动的 Pod 通常能够正常工作。")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("kubectl delete pod "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("pod-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("pod-namespece"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);